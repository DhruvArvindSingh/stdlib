/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );


// MAIN //

/**
* Computes the cumulative maximum of a strided array.
*
* @param {PositiveInteger} N - number of indexed elements
* @param {NumericArray} X - input array
* @param {integer} strideX - `X` stride length
* @param {NonNegativeInteger} offsetX - starting index for `X`
* @param {NumericArray} Y - output array
* @param {integer} strideY - `Y` stride length
* @param {NonNegativeInteger} offsetY - starting index for `Y`
* @returns {NumericArray} output array
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var X = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];
* var Y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];
* var N = floor( X.length / 2 );
*
* var v = cumax( N, X, 2, 1, Y, 1, 0 );
* // returns [ 1.0, 1.0, 2.0, 4.0, 0.0, 0.0, 0.0, 0.0 ]
*/
function cumax( N, X, strideX, offsetX, Y, strideY, offsetY ) {
	var max;
	var ix;
	var iy;
	var v;
	var i;

	if ( N <= 0 ) {
		return Y;
	}
	ix = offsetX;
	iy = offsetY;

	max = X[ ix ];
	Y[ iy ] = max;

	iy += strideY;
	i = 1;
	if ( isnan( max ) === false ) {
		for ( i; i < N; i++ ) {
			ix += strideX;
			v = X[ ix ];
			if ( isnan( v ) ) {
				max = v;
				break;
			}
			if ( v > max || ( v === max && isPositiveZero( v ) ) ) {
				max = v;
			}
			Y[ iy ] = max;
			iy += strideY;
		}
	}
	if ( isnan( max ) ) {
		for ( i; i < N; i++ ) {
			Y[ iy ] = max;
			iy += strideY;
		}
	}
	return Y;
}


// EXPORTS //

module.exports = cumax;
